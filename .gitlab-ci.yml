include:
  - project: 'common/gitlab-ci'
    ref: v0.5.0
    file: '/templates/npm-package-with-container.yml'

variables:
  KYSO_CLI_BUILDER_IMAGE: registry.kyso.io/kyso-io/kyso-cli:builder-v1.0.6
  DOCKER_BUILDKIT: 1

stages:
  - source_qa
  - npm_package_build
  - npm_package_publish
  - build_binaries
  - push_to_npm
  - docker_build
  - test
  - docker_push
  - release_tag

npm-package-build:
  image: $KYSO_CLI_BUILDER_IMAGE
  before_script:
    - mv /root/node_modules .

npm-package-publish:
  image: ${KYSO_CLI_BUILDER_IMAGE}
  before_script:
    - mv /root/node_modules .
    - !reference [.git-config, before_script]
    - !reference [.npm-config, before_script]
  script:
    - !reference [.npm-package-publish, script]

build-binaries:
  stage: build_binaries
  image: ${KYSO_CLI_BUILDER_IMAGE}
  rules:
    - if: '$CI_COMMIT_TAG'
  before_script:
    - mv /root/node_modules .
    - !reference [.git-config, before_script]
    - !reference [.npm-config, before_script]
  script:
    # Install missing modules
    - npm install
    # Build binaries
    - |-
      UPL_BASE_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic"
      UPL_BASE_URL="${UPL_BASE_URL}/kyso-cli-binaries/${CI_COMMIT_TAG}"
      npm run packtgz
      rm -f binaries.txt
      cd dist
      for txz in *.tar.xz; do
        url="${UPL_BASE_URL}/$txz"
        curl -s --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "$txz" "$url"
        echo "$txz $url" >>../binaries.txt
      done
      cd ..
      npm run packwin
      cd dist/win32
      for exe in *.exe; do
        url="${UPL_BASE_URL}/$exe"
        curl -s --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "$exe" "$url"
        echo "$exe $url" >>../../binaries.txt
      done
      cd ../..
      rm -rf dist
  artifacts:
    paths:
      - binaries.txt
    expire_in: 1 day

push-to-npm:
  stage: push_to_npm
  interruptible: false
  allow_failure: true
  image: ${KYSO_CLI_BUILDER_IMAGE}
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    # Execute only if the NPMJS_TOKEN variable is defined
    - |-
      if [ -z "$NPMJS_TOKEN" ]; then
        echo "Missing NPMJS_TOKEN, maybe the tag must be protected?"
        exit 0
      fi
    # Copy node_modules
    - mv /root/node_modules .
    # Get dependencies
    - |-
      echo "Getting package dependencies"
      PKG_NAME="kyso-cli-deps"
      PKG_VERS="$CI_COMMIT_TAG"
      PKGS_DIR="$PKG_NAME-$PKG_VERS"
      mkdir "$PKGS_DIR"
    - |-
      for pkg_ref in $(
        sed -n -e 's%^.*"\(@kyso-io/.*\)": "^*\(.*\)".*$%\1@\2%p' package.json
      ); do
        npm view "$pkg_ref" dist.tarball
      done | sort -u >"$PKGS_DIR/urls1.txt"
    - |-
      echo "Downloading tar files:"
      cd "$PKGS_DIR"
      HEADER="Authorization: Bearer ${CI_JOB_TOKEN}"
      for tgz_url in $(cat urls1.txt); do
        echo "- $tgz_url";
        curl -s -H "$HEADER" "$tgz_url" -O;
      done
      for pkg_ref in $(
        for tgz in *tgz; do tar xOaf $tgz package/package.json; done |
          sed -n -e 's%^.*"\(@kyso-io/.*\)": "^*\(.*\)".*$%\1@\2%p' |
          sort -u
      ); do
        npm view "$pkg_ref" dist.tarball
      done | sort -u >urls2.txt
      HEADER="Authorization: Bearer ${CI_JOB_TOKEN}"
      for tgz_url in $(diff urls1.txt urls2.txt | sed -ne 's/^> //p'); do
        echo "- $tgz_url";
        curl -s -H "$HEADER" "$tgz_url" -O;
      done
      rm -f urls1.txt urls2.txt
    - |-
      echo "Prepare .npmrc to push and pull modules to registry.npmjs.org"
      cd ..
      if [ -e ".npmrc" ]; then mv ".npmrc" ".npmrc.orig"; fi
      echo "registry=https://registry.npmjs.org" >".npmrc"
      echo "@kyso-io:registry=https://registry.npmjs.org" >>".npmrc"
      echo "//registry.npmjs.org/:_authToken=${NPMJS_TOKEN}" >>".npmrc"
      echo "The .npmrc file now contains the following:"
      cat .npmrc
      echo ""
      cd "$PKGS_DIR"
    # Push modules to https://registry.npmjs.org
    - failed=""
    - |-
      for tgz in $(ls -tr *.tgz); do
        echo "Adding '$tgz' file to cache"
        npm cache add "$tgz"
        echo "Publishing file"
        npm publish --access public "$tgz" || failed="$failed $tgz"
      done
      cd ..
      rm -rf "$PKGS_DIR"
    # Run npm publish
    - |-
      echo "Publishing package to registry.npmjs.org using npm publish"
      cp -a package.json package.json.orig
      sed -i -e 's%"name": "@kyso-io/kyso-cli"%"name": "kyso"%' package.json
      npm install
      npm publish --access public || failed="$failed kyso"
      mv package.json.orig package.json
    - |-
      rm -f ".npmrc";
      if [ -e ".npmrc.orig" ]; then
        mv ".npmrc.orig" ".npmrc";
      fi
    - |-
      if [ "$failed" ]; then
        for pkg in $failed; do
          echo "Publication of the '$pkg' package failed!"
          echo "Check if it was already published or something else is wrong"
        done
        exit 1
      fi

.docker-hub-config:
  before_script:
    - |-
      # Create ~/.docker/config.json file
      test -d "$HOME/.docker" || mkdir "$HOME/.docker"
      chmod 0700 "$HOME/.docker"
      if [ -z "${DOCKER_HUB_USER}" ] || [ -z "${DOCKER_HUB_TOKEN}" ]; then
        echo "Missing required DOCKER_HUB_* variable(s)"
        exit 1
      fi
      DOCKER_AUTH="$(echo -n "${CI_REGISTRY_USER}:${CI_JOB_TOKEN}" | base64)"
      DOCKER_HUB_AUTH="$(echo -n "${DOCKER_HUB_USER}:${DOCKER_HUB_TOKEN}" | base64)"
      cat > "$HOME/.docker/config.json" << EOF
      {
        "auths": {
          "${CI_REGISTRY}": {
            "auth": "${DOCKER_AUTH}"
          },
          "https://index.docker.io/v1/": {
            "auth": "${DOCKER_HUB_AUTH}"
          }
        }
      }
      EOF
      chmod 0600 "$HOME/.docker/config.json"

docker-build:
  before_script:
    - !reference [.docker-hub-config, before_script]
  rules:
    - if: '$CI_COMMIT_TAG'
  variables:
    IMAGE_NAME: "$CI_REGISTRY_IMAGE"
    IMAGE_TAG: "$CI_COMMIT_TAG"
    DOCKER_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
  script:
    - echo "PACKAGE_VERSION=$CI_COMMIT_TAG" >> .build-args
    - !reference [.docker-build, script]

container_scanning:
  variables:
    DOCKER_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"

docker-push:
  stage: docker_push
  extends: .docker-image-and-service
  dependencies:
    - docker-build
  rules:
    - if: '$CI_COMMIT_TAG'
  variables:
    IMAGE_NAME: "$CI_REGISTRY_IMAGE"
    IMAGE_TAG: "$CI_COMMIT_TAG"
    DOCKER_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    PUSH_IMAGE_NAME: "kyso/kyso"
  before_script:
    - !reference [.docker-hub-config, before_script]
  script:
    - |-
      echo "Pulling image '$DOCKER_IMAGE'"
      docker pull --quiet "$DOCKER_IMAGE"
      echo "Tagging it as '$PUSH_IMAGE_NAME:$IMAGE_TAG'"
      docker tag "$DOCKER_IMAGE" "$PUSH_IMAGE_NAME:$IMAGE_TAG"
      echo "Pushing it"
      docker push "$PUSH_IMAGE_NAME:$IMAGE_TAG"
      echo "Tagging it as '$PUSH_IMAGE_NAME:latest"
      docker tag "$DOCKER_IMAGE" "$PUSH_IMAGE_NAME:latest"
      echo "Pushing it"
      docker push "$PUSH_IMAGE_NAME:latest"

release_tag:
  dependencies:
    - build-binaries
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - echo "running release_tag"
    - |-
      LINKS=""
      while read -r name url; do
        link="$(printf '{"name":"%s","url":"%s"}' "$name" "$url")"
        LINKS="$LINKS --assets-link='$link'"
      done <binaries.txt
    - |-
      CMND="release-cli create --name 'Release $CI_COMMIT_TAG'"
      CMND="$CMND --description 'kyso-cli release $CI_COMMIT_TAG'"
      CMND="$CMND --tag-name '$CI_COMMIT_TAG'"
      CMND="$CMND $LINKS"
      echo "Executing command: $CMND"
      eval "$CMND"
  release:
